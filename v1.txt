#include <iostream>
#include <cstring>
#include <SFML/Graphics.hpp>
#include <SFML/Audio/Sound.hpp>
#include <SFML/Audio/SoundBuffer.hpp>
#include <SFML/System/Clock.hpp>
#include <SFML/System/Time.hpp>

using namespace sf;

//Needed to save answer data and ready answers
class AnswerPair {
public:
    std::string room;
    std::wstring answer;
};

//For sprites: buttons, inputs, etc.
class Object {
public:
    Texture texture;
    Sprite sprite;
};

void Restart(AnswerPair &player_answer, bool &is_room_input_available, bool &is_answer_input_available, 
    unsigned short &player_failes, Text& announcement);
int TotalResult(bool total_result, Text &announcements, bool& is_room_input_available, 
    bool& is_answer_input_available, SoundBuffer& total_sound_buffer, Sound& total_sound);
void LoseTry(Sound &lose_try_sound, unsigned short &player_failes);

int main() {
    const unsigned short health_amount = 5;
    unsigned short player_failes = 0;
    bool is_room_input_available = true;
    bool is_answer_input_available = false;
    AnswerPair answer_data[] = { {"1", L"бара"}, {"2", L"бере"}, {"3", L"бири"}, {"4", L"боро"} };
    const unsigned int amount_of_answers = 4;
    AnswerPair player_answer;

    RenderWindow window(VideoMode(800, 600), "Competiton");
    window.setFramerateLimit(60);

    Object restart_button;
    if (!restart_button.texture.loadFromFile("./Files/Textures/restart_texture_tr.png"))
        return -1;
    restart_button.sprite.setTexture(restart_button.texture);
    restart_button.sprite.setPosition(770, 0);

    Object player_answer_input;
    if (!player_answer_input.texture.loadFromFile("./Files/Textures/answer_input_texture_future_c.png"))
        return -1;
    player_answer_input.sprite.setTexture(player_answer_input.texture);
    player_answer_input.sprite.setPosition(200, 300);

    Object background;
    if (!background.texture.loadFromFile("./Files/Textures/background_hacker.png"))
        return -1;
    background.sprite.setTexture(background.texture);
    background.sprite.setPosition(-1, -1);

    Object heart;
    if (!heart.texture.loadFromFile("./Files/Textures/heart.png"))
        return -1;
    heart.sprite.setTexture(heart.texture);

    Font font;
    if (!font.loadFromFile("./Files/EchoRevival.ttf"))
        return -1;

    Text input_text;
    input_text.setFont(font);
    input_text.setCharacterSize(70);
    input_text.setFillColor(Color::Black);
    input_text.setPosition(220, 305);

    Text room_input_text;
    room_input_text.setFont(font);
    room_input_text.setCharacterSize(70);
    room_input_text.setFillColor(Color::Black);
    room_input_text.setPosition(220, 305);

    Text announcements;
    announcements.setFont(font);
    announcements.setCharacterSize(90);
    announcements.setFillColor(Color (53, 148, 14));
    announcements.setPosition(120, 130);

    SoundBuffer lose_try_buffer;
    if (!lose_try_buffer.loadFromFile("./Files/lose_try_sound.wav"))
        return -1;
    Sound lose_try_sound;
    lose_try_sound.setBuffer(lose_try_buffer);

    SoundBuffer total_sound_buffer;
    Sound total_sound;

    Clock clock;
    Time fps_timer;
    int fps_counter = 0;

    //Main loop
    while (window.isOpen()) {

        //Event catcher
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed)
                window.close();

            if (event.type == Event::MouseButtonPressed) {
                if (Mouse::isButtonPressed(Mouse::Left)) {
                    if (IntRect(restart_button.sprite.getPosition().x, restart_button.sprite.getPosition().y
                        , 30, 30).contains(Mouse::getPosition(window))) 
                        Restart(player_answer, is_room_input_available, is_answer_input_available, player_failes, announcements);
                }
            }

            if (event.type == event.TextEntered && event.text.unicode >= 1040 && event.text.unicode <= 1103) {
                if (event.key.code != Keyboard::BackSpace && is_answer_input_available)
                    player_answer.answer.push_back(static_cast<wchar_t>(event.text.unicode));
            }

            else if (event.type == event.TextEntered && event.text.unicode >= 48 && event.text.unicode <= 57) {
                if (event.key.code != Keyboard::BackSpace && is_room_input_available && player_answer.room.size() < 3)
                    player_answer.room.push_back(static_cast<wchar_t>(event.text.unicode));
            }

            if (event.type == Event::KeyPressed) {
                switch (event.key.code) {
                case Keyboard::BackSpace:
                    if (is_answer_input_available) {
                        if (player_answer.answer.size() > 0)
                            player_answer.answer.pop_back();
                        // player_answer = player_answer.substr(0, player_answer.size() - 1);
                    }
                    else {
                        if (player_answer.room.size() > 0)
                            player_answer.room.pop_back();
                    }
                    break;
                case Keyboard::Enter:
                    if (is_answer_input_available && player_answer.answer.size() > 0) {
                        for (int i = 0; i < amount_of_answers; i++) {
                            if (answer_data[i].room == player_answer.room) {
                                if (!answer_data[i].answer.std::wstring::compare(player_answer.answer)) {
                                    lose_try_sound.stop();
                                    if (TotalResult(true, announcements, is_room_input_available, is_answer_input_available, total_sound_buffer, total_sound)) return -1;
                                }
                                else LoseTry(lose_try_sound, player_failes);
                            }
                            else if (player_failes >= health_amount) {
                                lose_try_sound.stop();
                                if (TotalResult(false, announcements, is_room_input_available, is_answer_input_available, total_sound_buffer, total_sound)) return -1;
                            }
                        }
                    }
                    if (is_room_input_available && player_answer.room.size() > 0) {
                        is_room_input_available = false;
                        is_answer_input_available = true;
                        room_input_text.setString(L"");
                    }
                    break;
                default:
                    break;
                }
            }
        }

        window.clear();
        window.draw(background.sprite);

        input_text.setString(player_answer.answer);
        if (is_room_input_available) {
            room_input_text.setString(player_answer.room);
            announcements.setString(L"Введите класс");
        }
        else if (is_answer_input_available)
            announcements.setString(L"Введите ответ");

        window.draw(announcements);

        for (int i = 0; i < health_amount - player_failes; i++) {
            heart.sprite.setPosition(200 + 60 * i, 450);
            window.draw(heart.sprite);
        }

        window.draw(restart_button.sprite);
        window.draw(player_answer_input.sprite);
        window.draw(input_text);
        window.draw(room_input_text);
        window.display();
    }

    return 0;
}

//Restarts try
void Restart(AnswerPair &player_answer, bool & is_room_input_available, 
    bool &is_answer_input_available, unsigned short &player_failes, Text &announcement) {
    player_answer.answer.erase();
    player_answer.room.erase();
    is_room_input_available = true;
    is_answer_input_available = false;
    player_failes = 0;
    announcement.setPosition(120, 130);
}

int TotalResult(bool total_result, Text &announcements, bool& is_room_input_available, 
    bool& is_answer_input_available, SoundBuffer& total_sound_buffer, Sound &total_sound) {
    is_room_input_available = false;
    is_answer_input_available = false;

    if (total_result) {
        if (!total_sound_buffer.loadFromFile("./Files/win_try_sound.wav"))
            return -1;
        announcements.setString(L"Правильно!");
        announcements.setPosition(190, 100);
    }
    else {
        if (!total_sound_buffer.loadFromFile("./Files/total_lose_sound.wav"))
            return -1;
        announcements.setString(L"Попытки кончились");
        announcements.setPosition(15, 100);
    }

    total_sound.setBuffer(total_sound_buffer);
    total_sound.play();
    return 0;
}

void LoseTry(Sound &lose_try_sound, unsigned short &player_failes) {
    lose_try_sound.play();
    player_failes++;
}