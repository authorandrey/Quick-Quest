#include <iostream>
#include <cstring>
#include <SFML/Graphics.hpp>
#include <SFML/Audio/Sound.hpp>
#include <SFML/Audio/SoundBuffer.hpp>
#include <SFML/System/Clock.hpp>
#include <SFML/System/Time.hpp>

using namespace sf;

//Needed to save answer data and ready answers
class AnswerPair {
public:
    std::string room;
    std::wstring answer[3];
};

//For sprites: buttons, inputs, etc.
class Object {
public:
    Texture texture;
    Sprite sprite;
};

void Restart(AnswerPair &player_answer, bool &is_room_input_available, bool &is_answer_input_available, 
    unsigned short &player_wins, Text& announcement);
int TotalResult(Text &announcements, bool& is_room_input_available, 
    bool& is_answer_input_available, SoundBuffer& total_sound_buffer, Sound& total_sound,
    unsigned short &player_wins);
void LoseTry(Sound &lose_try_sound, unsigned short& answer_index);
void WinTry(Sound& win_try_sound, unsigned short& player_wins, unsigned short& answer_index);

int main() {
    //Remained tries
    const unsigned short health_amount = 5;
    //Current answer
    unsigned short answer_index = 0;
    //Player fail/win info
    unsigned short player_wins = 0;
    //If input type is available to change
    bool is_room_input_available = true;
    bool is_answer_input_available = false;
    //Answer
    std::wstring answers[5][5] = { {L"3343348163431343", L"ĞÎÑÑÈß", L"ÊÀÔÅÃËÎĞÈß", L"ÑÒÀÄÈÎÍÌÀßÊ", L"ÓËÈÖÀÌÈĞÀ"},
                                {L"ÑÄÇÈÊÇÄ.", L"ÑÍÂÀİÏİßÍËÍİ.", L"ÇÀÙÈÒÀÁĞÅÑÒÑÊÎÉÊĞÅÏÎÑÒÈ", L"ÅÂÏÀÒÈÉÊÎËÎÂĞÀÒ", L"ÏÅĞÅÑÂÅÒ"},
                                {L"ÁÅĞÅÃÈ", L"ÇÅÌËŞ", L"ĞÎÄÈÌÓŞ", L"ÊÀÊÌÀÒÜ", L"ËŞÁÈÌÓŞ"},
                                {L"", L"", L"", L"", L""},
                                {L"", L"", L"", L"", L""} };
    AnswerPair answer_data[] = { {"1", {L"áàğà", L"áåğå", L"áèğè"}}, {"2", L"áåğå"}, {"3", L"áèğè"}, {"4", L"áîğî"}};
    const unsigned int amount_of_answers = 6;
    AnswerPair player_answer;

    ContextSettings textures_settings;
    textures_settings.antialiasingLevel = 8;

    RenderWindow window(VideoMode(800, 600), "Competiton", Style::Default, textures_settings);
    window.setFramerateLimit(60);

    Object restart_button;
    if (!restart_button.texture.loadFromFile("./Files/Textures/restart_texture_tr.png"))
        return -1;
    restart_button.sprite.setTexture(restart_button.texture);
    restart_button.sprite.setPosition(770, 0);

    Object player_answer_input;
    if (!player_answer_input.texture.loadFromFile("./Files/Textures/answer_input_texture_future_c.png"))
        return -1;
    player_answer_input.sprite.setTexture(player_answer_input.texture);
    player_answer_input.sprite.setPosition(200, 300);

    Object background;
    if (!background.texture.loadFromFile("./Files/Textures/background_hacker.png"))
        return -1;
    background.sprite.setTexture(background.texture);
    background.sprite.setPosition(-1, -1);

    Object heart;
    if (!heart.texture.loadFromFile("./Files/Textures/heart.png"))
        return -1;
    heart.sprite.setTexture(heart.texture);

    CircleShape room_choose(30.f);
    room_choose.setFillColor(Color(158, 158, 158));
    room_choose.setPosition(50, 20);

    Font font;
    if (!font.loadFromFile("./Files/EchoRevival.ttf"))
        return -1;

    Text input_text;
    input_text.setFont(font);
    input_text.setCharacterSize(70);
    input_text.setFillColor(Color::Black);
    input_text.setPosition(225, 305);

    Text room_input_text;
    room_input_text.setFont(font);
    room_input_text.setCharacterSize(70);
    room_input_text.setFillColor(Color::Black);
    room_input_text.setPosition(225, 305);

    Text announcements;
    announcements.setFont(font);
    announcements.setCharacterSize(90);
    announcements.setFillColor(Color (53, 148, 14));
    announcements.setPosition(120, 130);

    SoundBuffer lose_try_buffer;
    if (!lose_try_buffer.loadFromFile("./Files/lose_try_sound.wav"))
        return -1;
    Sound lose_try_sound;
    lose_try_sound.setBuffer(lose_try_buffer);

    SoundBuffer win_try_buffer;
    if (!win_try_buffer.loadFromFile("./Files/win_try_sound.wav"))
        return -1;
    Sound win_try_sound;
    win_try_sound.setBuffer(lose_try_buffer);

    SoundBuffer total_sound_buffer;
    Sound total_sound;

    Clock clock;
    Time fps_timer;

    //Main loop
    while (window.isOpen()) {

        //Event catcher
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed)
                window.close();

            if (event.type == Event::MouseButtonPressed) {
                if (Mouse::isButtonPressed(Mouse::Left)) {
                    if (IntRect(restart_button.sprite.getPosition().x, restart_button.sprite.getPosition().y
                        , 30, 30).contains(Mouse::getPosition(window))) 
                        Restart(player_answer, is_room_input_available, is_answer_input_available, player_wins, announcements);
                }
            }

            if (event.type == event.TextEntered && event.text.unicode >= 1040 && event.text.unicode <= 1103) {
                if (event.key.code != Keyboard::BackSpace && is_answer_input_available)
                    player_answer.answer[answer_index].push_back(static_cast<wchar_t>(event.text.unicode));
            }

            else if (event.type == event.TextEntered && event.text.unicode >= 48 && event.text.unicode <= 57) {
                if (event.key.code != Keyboard::BackSpace && is_room_input_available && player_answer.room.size() < 3)
                    player_answer.room.push_back(static_cast<wchar_t>(event.text.unicode));
            }

            if (event.type == Event::KeyPressed) {
                switch (event.key.code) {
                case Keyboard::BackSpace:
                    if (is_answer_input_available) {
                        if (player_answer.answer[answer_index].size() > 0)
                            player_answer.answer[answer_index].pop_back();
                        // player_answer = player_answer.substr(0, player_answer.size() - 1);
                    }
                    else {
                        if (player_answer.room.size() > 0)
                            player_answer.room.pop_back();
                    }
                    break;
                case Keyboard::Enter:
                    if (is_answer_input_available && player_answer.answer[answer_index].size() > 0) {
                        for (int i = 0; i < amount_of_answers; i++) {
                            if (answer_data[i].room == player_answer.room) {
                                if (!answer_data[i].answer[answer_index].std::wstring::compare(player_answer.answer[answer_index])) {
                                    lose_try_sound.stop();
                                    if (answer_index < 3) WinTry(win_try_sound, player_wins, answer_index);
                                    else TotalResult(announcements, is_room_input_available, is_answer_input_available, total_sound_buffer, total_sound, player_wins);
                                }
                                else LoseTry(lose_try_sound, answer_index);
                            }
                        }
                    }
                    if (is_room_input_available && player_answer.room.size() > 0) {
                        is_room_input_available = false;
                        is_answer_input_available = true;
                        room_input_text.setString(L"");
                    }
                    break;
                default:
                    break;
                }
            }
        }

        window.clear();
        window.draw(background.sprite);

        if (player_answer.answer[answer_index].size() == 0 && player_answer.room.size() == 0)
            input_text.setString(L"Íîìåğ");
        else if (player_answer.answer[answer_index].size() == 0 && player_answer.room.size() != 0 && is_answer_input_available)
            input_text.setString(L"Ñëîâî " + std::to_wstring(answer_index + 1));
        else input_text.setString(player_answer.answer[answer_index]);

        if (is_room_input_available) {
            room_input_text.setString(player_answer.room);
            announcements.setString(L"Ââåäèòå êëàññ");
        }
        else if (is_answer_input_available)
            announcements.setString(L"Ââåäèòå Îòâåò");

        window.draw(announcements);

        window.draw(restart_button.sprite);
        window.draw(player_answer_input.sprite);
        window.draw(input_text);
        window.draw(room_input_text);
        window.draw(room_choose);
        window.display();
    }

    return 0;
}

//Restarts try
void Restart(AnswerPair &player_answer, bool & is_room_input_available, 
    bool &is_answer_input_available, unsigned short &player_wins, Text &announcement) {
    for (int i = 0; i < 3; i++) player_answer.answer[i].erase();
    player_answer.room.erase();
    is_room_input_available = true;
    is_answer_input_available = false;
    player_wins = 0;
    announcement.setPosition(120, 130);
}

int TotalResult(Text &announcements, bool& is_room_input_available, 
    bool& is_answer_input_available, SoundBuffer& total_sound_buffer, Sound &total_sound
    , unsigned short &player_wins) {
    is_room_input_available = false;
    is_answer_input_available = false;

    if (player_wins == 3) {
        if (!total_sound_buffer.loadFromFile("./Files/win_try_sound.wav"))
            return -1;
        announcements.setString(L"Âñ¸ ïğàâèëüíî!");
        announcements.setPosition(190, 100);
    }
    else {
        if (!total_sound_buffer.loadFromFile("./Files/total_lose_sound.wav"))
            return -1;
        announcements.setString(L"Íå âñ¸ ïğàâèëüíî");
        announcements.setPosition(15, 100);
    }

    total_sound.setBuffer(total_sound_buffer);
    total_sound.play();
    return 0;
}

void WinTry(Sound &win_try_sound, unsigned short& player_wins, unsigned short& answer_index) {
    win_try_sound.play();
    player_wins++;
    answer_index++;
}

void LoseTry(Sound &lose_try_sound, unsigned short &answer_index) {
    lose_try_sound.play();
    answer_index++;
}